/*
Copyright 2018 The Kuncen Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/fajran/kuncen/pkg/apis/kuncen/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EncryptedSecretLister helps list EncryptedSecrets.
type EncryptedSecretLister interface {
	// List lists all EncryptedSecrets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EncryptedSecret, err error)
	// EncryptedSecrets returns an object that can list and get EncryptedSecrets.
	EncryptedSecrets(namespace string) EncryptedSecretNamespaceLister
	EncryptedSecretListerExpansion
}

// encryptedSecretLister implements the EncryptedSecretLister interface.
type encryptedSecretLister struct {
	indexer cache.Indexer
}

// NewEncryptedSecretLister returns a new EncryptedSecretLister.
func NewEncryptedSecretLister(indexer cache.Indexer) EncryptedSecretLister {
	return &encryptedSecretLister{indexer: indexer}
}

// List lists all EncryptedSecrets in the indexer.
func (s *encryptedSecretLister) List(selector labels.Selector) (ret []*v1alpha1.EncryptedSecret, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EncryptedSecret))
	})
	return ret, err
}

// EncryptedSecrets returns an object that can list and get EncryptedSecrets.
func (s *encryptedSecretLister) EncryptedSecrets(namespace string) EncryptedSecretNamespaceLister {
	return encryptedSecretNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EncryptedSecretNamespaceLister helps list and get EncryptedSecrets.
type EncryptedSecretNamespaceLister interface {
	// List lists all EncryptedSecrets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EncryptedSecret, err error)
	// Get retrieves the EncryptedSecret from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EncryptedSecret, error)
	EncryptedSecretNamespaceListerExpansion
}

// encryptedSecretNamespaceLister implements the EncryptedSecretNamespaceLister
// interface.
type encryptedSecretNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EncryptedSecrets in the indexer for a given namespace.
func (s encryptedSecretNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EncryptedSecret, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EncryptedSecret))
	})
	return ret, err
}

// Get retrieves the EncryptedSecret from the indexer for a given namespace and name.
func (s encryptedSecretNamespaceLister) Get(name string) (*v1alpha1.EncryptedSecret, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("encryptedsecret"), name)
	}
	return obj.(*v1alpha1.EncryptedSecret), nil
}
